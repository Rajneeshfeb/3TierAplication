AWSTemplateFormatVersion: '2010-09-09'
Description: 3 tier web aplication
Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
    Default: {{ data.vpc }}
  WebPort:
    Type: Number
    Default: {{ data.web_port}}
  DbPort:
    Type: Number
    Default: {{ data.db_port}}
  LbPort:
    Type: Number
    Default: {{ data.lb_port}}
  KeyName:
    Type: String
    Default: {{ data.ec2_key }}
  InstanceType:
    Type: String
    Default: {{ data.instace_type }}
  LatestAmiId:
    Type: String
    Default: {{ data.ami_id}}

Resources:
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: "web"
      SecurityGroupIds: sg-342eee58
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort:
            Ref: WebPort
          ToPort:
            Ref: WebPort

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: "DB"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort:
            Ref: DbPort
          ToPort:
            Ref: DbPort

  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: "LB"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort:
            Ref: LbPort
          ToPort:
            Ref: LbPort
          CidrIp: 0.0.0.0/0
  
  LaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      InstanceType: "t2.micro"
      KeyName:  !Ref 'KeyName'
      AssociatePublicIpAddress: false
      ImageId: !Ref 'LatestAmiId'
      SecurityGroupIds: !Ref WebSecurityGroup
      BlockDeviceMappings:
        -
          DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: 8
            VolumeType: gp2
            DeleteOnTermination: true
  
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AvailabilityZones: !GetAZs ''
      CrossZone: 'true'
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: '2'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
    Properties:
      AvailabilityZones: !GetAZs ''
      LaunchConfigurationName: !Ref 'LaunchConfig'
      MinSize: '1'
      MaxSize: '2'
      LoadBalancerNames: [!Ref 'ElasticLoadBalancer']